{"version":3,"sources":["components/Navbar.js","components/Tables.js","components/About.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","style","height","width","cursor","role","htmlFor","Tables","useState","text","setText","color","backgroundColor","myStyle","setMyStyle","btnText","SetBtnText","heading","value","onChange","event","console","log","target","rows","newText","toUpperCase","copyText","document","getElementById","select","navigator","clipboard","writeText","getSelection","removeAllRanges","split","filter","e","length","toFixed","border","About","defaultProps","App","darkMode","setdarkMode","cls","body","classList","remove","add","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kOAKe,SAASA,EAAOC,GAC7B,OACE,qBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,SACE,sBAAKD,UAAU,kBAAf,UACE,cAAC,IAAD,CAAMA,UAAU,eAAeE,GAAG,IAAlC,SAAuCH,EAAMI,QAC7C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMJ,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,UACE,qBAAIL,UAAU,kCAAd,UACE,oBAAIA,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,yBAAyB,eAAa,OAAOE,GAAG,IAAhE,qBAEF,oBAAIF,UAAU,WAAd,SACE,cAAC,IAAD,CAAMA,UAAU,QAAQE,GAAG,SAA3B,SAAqCH,EAAMO,iBAG/C,sBAAKN,UAAU,SAAf,UACE,qBAAKA,UAAU,0BAA0BO,QAAS,WAAKR,EAAMS,WAAW,YAAaC,MAAO,CAACC,OAAO,OAAOC,MAAM,OAAOC,OAAO,aAC/H,qBAAKZ,UAAU,yBAAyBO,QAAS,WAAKR,EAAMS,WAAW,WAAYC,MAAO,CAACC,OAAO,OAAOC,MAAM,OAAOC,OAAO,aAC7H,qBAAKZ,UAAU,0BAA0BO,QAAS,WAAKR,EAAMS,WAAW,YAAaC,MAAO,CAACC,OAAO,OAAOC,MAAM,OAAOC,OAAO,aAC/H,qBAAKZ,UAAU,0BAA0BO,QAAS,WAAKR,EAAMS,WAAW,YAAaC,MAAO,CAACC,OAAO,OAAOC,MAAM,OAAOC,OAAO,gBAEjI,sBAAKZ,UAAU,yBAAf,UACE,uBAAOA,UAAU,mBAAmBO,QAAS,WAAKR,EAAMS,WAAW,OAAQJ,KAAK,WAAWS,KAAK,SAASR,GAAG,2BAC5G,uBAAOL,UAAS,gCAAwC,UAAbD,EAAME,KAAe,OAAO,SAAWa,QAAQ,yBAA1F,yCC3BG,SAASC,EAAOhB,GAC3B,MAAwBiB,mBAAS,mBAAjC,mBAAOC,EAAP,KAAaC,EAAb,KA4BA,EAA8BF,mBAAS,CACnCG,MAAO,QACPC,gBAAiB,UAFrB,mBAAOC,EAAP,KAAgBC,EAAhB,KAKA,EAA8BN,mBAAS,oBAAvC,mBAAOO,EAAP,KAAgBC,EAAhB,KAwBA,OACI,sBAAKxB,UAAU,YAAf,UAEI,sBAAKA,UAAU,YAAYS,MAAO,CAACW,gBAA6B,SAAbrB,EAAME,KAAc,OAAO,QAAQkB,MAAmB,SAAbpB,EAAME,KAAc,QAAQ,SAAxH,UACI,6BAAKF,EAAM0B,UACX,0BAAUzB,UAAU,eAAe0B,MAAOT,EAAMU,SAtDrC,SAACC,GACpBC,QAAQC,IAAI,aACZZ,EAAQU,EAAMG,OAAOL,QAoD6DjB,MAAO,CAACW,gBAA6B,SAAbrB,EAAME,KAAc,OAAO,QAAQkB,MAAmB,SAAbpB,EAAME,KAAc,QAAQ,SAAUI,GAAG,QAAQ2B,KAAK,MACjM,wBAAQhC,UAAU,uBAAuBO,QA7D/B,WAClBsB,QAAQC,IAAI,yBACZ,IAAIG,EAAUhB,EAAKiB,cACnBhB,EAAQe,IA0DA,kCACA,wBAAQjC,UAAU,4BAA4BO,QAnDvC,WACf,IAAI4B,EAAWC,SAASC,eAAe,SAGvCF,EAASG,SAITC,UAAUC,UAAUC,UAAUN,EAAST,OACvCU,SAASM,eAAeC,mBA0ChB,0BAGJ,sBAAK3C,UAAU,iBAAkBS,MAAO,CAACW,gBAA6B,SAAbrB,EAAME,KAAc,OAAO,QAAQkB,MAAmB,SAAbpB,EAAME,KAAc,QAAQ,SAA9H,UACI,mDACA,8BAAIgB,EAAK2B,MAAM,OAAOC,QAAO,SAACC,GAAK,OAAkB,IAAXA,EAAEC,UAAaA,OAAzD,SAAuE9B,EAAK8B,OAA5E,iBACA,+BAAK,KAAQ9B,EAAK2B,MAAM,KAAKG,QAAQC,QAAQ,GAA7C,sBAEJ,qBAAKhD,UAAU,iBAAf,SACI,wBAAQO,QAtCA,WACM,UAAlBc,EAAQF,OACRG,EAAW,CACPH,MAAO,QACPC,gBAAiB,QACjB6B,OAAQ,oBAEZzB,EAAW,uBAIXF,EAAW,CACPH,MAAO,QACPC,gBAAiB,UAErBI,EAAW,sBAuBuBpB,KAAK,SAASJ,UAAU,kBAAtD,SAAyEuB,SC3E1E,SAAS2B,IACpB,OACI,qBAAKlD,UAAU,YAAf,SACI,sBAAKA,UAAU,YAAYK,GAAG,mBAA9B,UACI,sBAAKL,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBK,GAAG,aAApC,SACI,wBAAQL,UAAU,mBAAmBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,OAAO,gBAAc,cAA9I,iCAIJ,qBAAKC,GAAG,cAAcL,UAAU,mCAAmC,kBAAgB,aAAa,iBAAe,oBAA/G,SACI,sBAAKA,UAAU,iBAAf,UACI,8EADJ,6WACua,mDADva,uDAKR,sBAAKA,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBK,GAAG,aAApC,SACI,wBAAQL,UAAU,6BAA6BI,KAAK,SAAS,iBAAe,WAAW,iBAAe,eAAe,gBAAc,QAAQ,gBAAc,cAAzJ,iCAIJ,qBAAKC,GAAG,cAAcL,UAAU,8BAA8B,kBAAgB,aAAa,iBAAe,oBAA1G,SACI,sBAAKA,UAAU,iBAAf,UACI,+EADJ,8WACya,mDADza,uDAKR,sBAAKA,UAAU,iBAAf,UACI,oBAAIA,UAAU,mBAAmBK,GAAG,eAApC,SACI,wBAAQL,UAAU,6BAA6BI,KAAK,SAAS,iBAAe,WAAW,iBAAe,iBAAiB,gBAAc,QAAQ,gBAAc,gBAA3J,iCAIJ,qBAAKC,GAAG,gBAAgBL,UAAU,8BAA8B,kBAAgB,eAAe,iBAAe,oBAA9G,SACI,sBAAKA,UAAU,iBAAf,UACI,8EADJ,8WACwa,mDADxa,4DFKxBF,EAAOqD,aAAe,CACpBhD,MAAO,Q,WGSMiD,MA3Cf,WACE,MAAgCpC,mBAAS,SAAzC,mBAAOqC,EAAP,KAAiBC,EAAjB,KAwBA,OACE,eAAC,IAAD,WAEE,cAACxD,EAAD,CAAQQ,UAAU,QAAQL,KAAMoD,EAAU7C,WAf3B,SAAC+C,GATlBnB,SAASoB,KAAKC,UAAUC,OAAO,cAC/BtB,SAASoB,KAAKC,UAAUC,OAAO,aAC/BtB,SAASoB,KAAKC,UAAUC,OAAO,cAC/BtB,SAASoB,KAAKC,UAAUC,OAAO,cAC/BtB,SAASoB,KAAKC,UAAUC,OAAO,WAC/BtB,SAASoB,KAAKC,UAAUC,OAAO,YAM/BtB,SAASoB,KAAKC,UAAUE,IAAI,MAAMJ,GACjB,UAAbF,GACFC,EAAY,QACZlB,SAASoB,KAAK/C,MAAMW,gBAAkB,SAGtCkC,EAAY,SACZlB,SAASoB,KAAK/C,MAAMW,gBAAkB,YAOtC,qBAAKpB,UAAU,iBAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAO4D,OAAK,EAACC,KAAK,SAAlB,SACA,cAACX,EAAD,MAEA,cAAC,IAAD,CAAOU,OAAK,EAACC,KAAK,IAAlB,SACA,cAAC9C,EAAD,CAAQU,QAAQ,4BAA4BxB,KAAMoD,eChC7CS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrC,SAASC,eAAe,SAM1ByB,M","file":"static/js/main.d71514bb.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-a active mx-3 px-3\" aria-current=\"page\" to=\"/\">Home </Link>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <Link className=\"nav-a\" to=\"/about\">{props.aboutText}</Link>\r\n            </li>\r\n          </ul>\r\n          <div className=\"d-flex\">\r\n            <div className=\"bg-primary rounded mx-2\" onClick={()=>{props.toggleMode('primary')}} style={{height:'30px',width:'30px',cursor:'pointer'}} ></div>\r\n            <div className=\"bg-danger rounded mx-2\" onClick={()=>{props.toggleMode('danger')}} style={{height:'30px',width:'30px',cursor:'pointer'}} ></div>\r\n            <div className=\"bg-success rounded mx-2\" onClick={()=>{props.toggleMode('success')}} style={{height:'30px',width:'30px',cursor:'pointer'}} ></div>\r\n            <div className=\"bg-warning rounded mx-2\" onClick={()=>{props.toggleMode('warning')}} style={{height:'30px',width:'30px',cursor:'pointer'}} ></div>\r\n          </div>\r\n          <div className=\"form-check form-switch\">\r\n            <input className=\"form-check-input\" onClick={()=>{props.toggleMode(null)} }type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n            <label className={`form-check-label text-${props.mode==='light'?'dark':'light'}`} htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: \"Text\"\r\n}","import React, { useState } from 'react'\r\n\r\n\r\nexport default function Tables(props) {\r\n    const [text, setText] = useState('Enter text here');\r\n\r\n    const handleUpClick = () => {\r\n        console.log('Uppercase was clicked');\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        console.log('On change');\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        var copyText = document.getElementById('myBox');\r\n\r\n        /* Select the text field */\r\n        copyText.select();\r\n        // copyText.setSelectionRange(0, 99999); /* For mobile devices */\r\n\r\n        /* Copy the text inside the text field */\r\n        navigator.clipboard.writeText(copyText.value);\r\n        document.getSelection().removeAllRanges();\r\n\r\n        // /* Alert the copied text */\r\n        // alert(\"Copied the text: \" + copyText.value);\r\n    }\r\n\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n\r\n    const [btnText, SetBtnText] = useState('Enable Dark mode')\r\n\r\n    const toogleStyle = () => {\r\n        if (myStyle.color === 'black') {\r\n            setMyStyle({\r\n                color: 'white',\r\n                backgroundColor: 'black',\r\n                border: '1px solid white'\r\n            })\r\n            SetBtnText('Enable Light Mode')\r\n        }\r\n\r\n        else {\r\n            setMyStyle({\r\n                color: 'black',\r\n                backgroundColor: 'white'\r\n            })\r\n            SetBtnText('Enable Dark Mode')\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\" >\r\n        {/* < div className=\"container\" style={myStyle}> */}\r\n            <div className=\"mb-3 my-3\" style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"6\"></textarea>\r\n                <button className=\"btn btn-primary my-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n                <button className=\"btn btn-primary my-2 mx-2\" onClick={handleCopy}>Copy Text</button>\r\n\r\n            </div>\r\n            <div className=\"container my-2\"  style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}} >\r\n                <h2>Your Text Summary</h2>\r\n                <p>{text.split(/\\s+/).filter((e)=>{return e.length!==0}).length} word {text.length} characters</p>\r\n                <p>{(0.008 * text.split(' ').length).toFixed(2)} Minutes read</p>\r\n            </div>\r\n            <div className=\"container my-3\" >\r\n                <button onClick={toogleStyle} type='button' className='btn btn-primary'>{btnText}</button>\r\n            </div>\r\n         </div> \r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function About() {\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\">\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Tables from './components/Tables';\nimport { useState } from 'react';\nimport About from './components/About';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\n\n\nfunction App() {\n  const [darkMode, setdarkMode] = useState('light')\n\n  const removeClass=()=>{\n    document.body.classList.remove('bg-primary')\n    document.body.classList.remove('bg-danger')\n    document.body.classList.remove('bg-success')\n    document.body.classList.remove('bg-warning')\n    document.body.classList.remove('bg-dark')\n    document.body.classList.remove('bg-light')\n\n  }\n\n  const toggleMode = (cls) => {\n    removeClass()\n    document.body.classList.add('bg-'+cls)\n    if (darkMode === 'light') {\n      setdarkMode('dark')\n      document.body.style.backgroundColor = 'grey'\n    }\n    else {\n      setdarkMode('light')\n      document.body.style.backgroundColor = 'white'\n    }\n  }\n  return (\n    <Router>\n    {/* <> */}\n      <Navbar aboutText=\"About\" mode={darkMode} toggleMode={toggleMode} />\n      <div className=\"container my-3\">\n        <Switch>\n          <Route exact path='/about'>\n          <About/>\n          </Route>\n          <Route exact path=\"/\">\n          <Tables heading=\"Enter the text to analyse\" mode={darkMode}/>\n          </Route>\n        </Switch>\n      </div>\n      </Router>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}